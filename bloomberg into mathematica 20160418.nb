(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    161920,       3551]
NotebookOptionsPosition[    159555,       3469]
NotebookOutlinePosition[    159988,       3487]
CellTagsIndexPosition[    159945,       3484]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Bloomberg Data to Mathematica", "Title",
 CellChangeTimes->{{3.4348218733245*^9, 3.434821880183875*^9}, {
  3.44951690785*^9, 3.449516919975*^9}, {3.4542526066628895`*^9, 
  3.4542526102875414`*^9}, {3.454671279093625*^9, 3.4546712805155*^9}, {
  3.6328723944795456`*^9, 3.632872394854727*^9}}],

Cell["April 18, 2016", "Subsubtitle",
 CellChangeTimes->{{3.4348218841995*^9, 3.434821885262*^9}, {
   3.45466980885925*^9, 3.454669810093625*^9}, {3.45960533434375*^9, 
   3.459605336546875*^9}, {3.46385140536852*^9, 3.46385140624352*^9}, {
   3.465744082552105*^9, 3.465744082989582*^9}, {3.50306886475525*^9, 
   3.50306886694275*^9}, {3.548606507408375*^9, 3.548606510252125*^9}, {
   3.6029615119274063`*^9, 3.602961513863517*^9}, {3.632843524427566*^9, 
   3.632843528133463*^9}, {3.6573086878490753`*^9, 3.6573086911982875`*^9}, {
   3.6595722418375053`*^9, 3.659572243281179*^9}, {3.6663509589354014`*^9, 
   3.6663509624376016`*^9}, 3.667243143184947*^9, {3.6699871992833815`*^9, 
   3.669987201156489*^9}}],

Cell[TextData[{
 "This code and the associated binaries, if properly installed, will allow \
you to load data from Bloomberg directly into Mathematica. It requires that \
you have a Bloomberg Professional license, have installed the Bloomberg API, \
and have logged in to Bloomberg Professional on the same machine as you\
\[CloseCurlyQuote]re running these functions on in the last 24 hours (and not \
logged in anywhere else more recently). This interface relies on DateObjects, \
TimeSeries and EventSeries, and will not work with versions of Mathematica \
earlier than 10.0. If you are using an old version of Mathematica, install \
the version of this interface titled \
\[OpenCurlyDoubleQuote]BBGetNF1-bloomberg into mathematica 201206\
\[CloseCurlyDoubleQuote], which has many of the same capabilities and will \
run on much older versions of Mathematica.\n\nTo install, place the enclosed \
binaries into a folder (typically under \[OpenCurlyDoubleQuote]C:\\Program \
Files\\Wolfram Research\\\[CloseCurlyDoubleQuote], and by default \
\[OpenCurlyDoubleQuote]C:\\Program Files\\Wolfram Research\\msFunctions\\\
\[CloseCurlyDoubleQuote] though this can be changed with the \
\[OpenCurlyDoubleQuote]path to executable\[CloseCurlyDoubleQuote] option on \
each function.\n\nThis interface consists of four commands:\n\n",
 StyleBox["msBBGgetHistory:",
  FontWeight->"Bold"],
 " returns historical data from Bloomberg, normally in TemporalData format \
though alternatives are available. Can be used for example to retrieve U.S. \
CPI monthly back to 1969, or the closing price of Apple Inc. daily since \
1978.\n",
 StyleBox["msGetBBG:",
  FontWeight->"Bold"],
 " Returns Bloomberg data for a single field for one or more securities. \
Works for both single-number reponses (such as current market cap) and \
multi-field responses (such as all registered owners). The FLDS command in \
Bloomberg can be used to identify what data is available for each security \
and which overrides, if any, are allowed.\n",
 StyleBox["msBBGetIntraday",
  FontWeight->"Bold"],
 ": returns intraday trade data (or ask data, or bid data)\n",
 StyleBox["msBBGetIntradayBars",
  FontWeight->"Bold"],
 ":  returns periodic intraday data (price snapshots every minute, for \
example).\n\nThe source code for these functions is available at\n",
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{
     RowBox[{"https", ":"}], "//", 
     RowBox[{
      RowBox[{
       RowBox[{"github", ".", "com"}], "/", "MichaelSternNYC"}], "/"}]}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL["https://github.com/MichaelSternNYC/"], None},
    ButtonNote->"https://github.com/MichaelSternNYC/"], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.449516680834375*^9, 3.449516759615625*^9}, {
   3.449517050928125*^9, 3.4495171807875*^9}, {3.45121680611825*^9, 
   3.451216810758875*^9}, {3.451226165587*^9, 3.451226216337*^9}, {
   3.4542526240830917`*^9, 3.45425270795004*^9}, 3.45466982904675*^9, {
   3.454669864468625*^9, 3.454670137843625*^9}, {3.454670220812375*^9, 
   3.45467024460925*^9}, {3.45960536375*^9, 3.459605372546875*^9}, {
   3.459605466140625*^9, 3.45960547009375*^9}, {3.463339646437875*^9, 
   3.463339662781625*^9}, 3.463851368790395*^9, {3.465744092957822*^9, 
   3.465744093426548*^9}, {3.4657446581476326`*^9, 3.4657446588819704`*^9}, 
   3.503068715239625*^9, {3.548673433158375*^9, 3.548673448814625*^9}, 
   3.54867356558025*^9, {3.60296120918609*^9, 3.602961250406448*^9}, {
   3.630504117512353*^9, 3.630504117580346*^9}, {3.632843484272464*^9, 
   3.632843512567583*^9}, 3.632872432481097*^9, {3.632872499389725*^9, 
   3.6328725519546843`*^9}, {3.633088347874323*^9, 3.6330884437531657`*^9}, {
   3.633088900363977*^9, 3.6330889395208364`*^9}, {3.6330901457699895`*^9, 
   3.6330901459263444`*^9}, {3.63309058595151*^9, 3.6330906245035267`*^9}, {
   3.633136777425167*^9, 3.6331367906007757`*^9}, {3.6331956806793118`*^9, 
   3.63319568097927*^9}, {3.659567201273368*^9, 3.6595672751080093`*^9}, {
   3.6595720775727863`*^9, 3.659572125647605*^9}, {3.6595722565015697`*^9, 
   3.659572295154903*^9}, 3.6625909213197823`*^9, {3.6663509822967377`*^9, 
   3.666351077400177*^9}, 3.66636203716604*^9, {3.6663622863912945`*^9, 
   3.6663623391453123`*^9}, {3.666362505125806*^9, 3.6663625106461215`*^9}, {
   3.6663625920177755`*^9, 3.6663627148297997`*^9}, {3.666362888597739*^9, 
   3.6663628892587767`*^9}, {3.666363203432747*^9, 3.6663632538356295`*^9}, {
   3.666365320433832*^9, 3.666365321231878*^9}, {3.666365434666366*^9, 
   3.6663654610438747`*^9}, {3.6663696898137465`*^9, 
   3.6663696981752243`*^9}, {3.6663697480790787`*^9, 3.666369866515853*^9}, {
   3.666369979332306*^9, 3.666369987568777*^9}, {3.667243231725011*^9, 
   3.667243236886306*^9}, {3.66724327558552*^9, 3.667243282187897*^9}, {
   3.6699872664582243`*^9, 3.669987302810303*^9}}],

Cell[CellGroupData[{

Cell["Code", "Section",
 CellChangeTimes->{{3.632872467451565*^9, 3.6328724678414745`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bbgifyDate", "[", "date_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "dtO", "}"}], ",", 
      RowBox[{
       RowBox[{"dtO", "=", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringQ", "[", "date", "]"}], "&&", 
           RowBox[{
            RowBox[{"StringLength", "[", "date", "]"}], "\[Equal]", "0"}]}], 
          ",", 
          RowBox[{"DateObject", "[", "]"}], ",", 
          RowBox[{
           RowBox[{"Head", "[", "date", "]"}], "===", "DateObject"}], ",", 
          "date", ",", "True", ",", 
          RowBox[{"DateObject", "[", "date", "]"}]}], "]"}]}], ";", 
       RowBox[{"DateString", "[", 
        RowBox[{"dtO", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Year\>\"", ",", "\"\<Month\>\"", ",", "\"\<Day\>\""}], 
          "}"}]}], "]"}]}]}], "]"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "converts", " ", "date", " ", "in", " ", "any", " ", "format", " ", "to", 
     " ", "the", " ", "string", " ", "format", " ", "bloomberg", " ", 
     RowBox[{"wants", ".", " ", "If"}], " ", "given", " ", "empty", " ", 
     "string"}], ",", " ", 
    RowBox[{"returns", " ", 
     RowBox[{"today", "'"}], "s", " ", 
     RowBox[{"date", "."}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msGetBBGMakeLinkObject", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], ",", 
           RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
         "\"\<msGetBBGLink.exe\>\""}], "}"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msGetBBGMakeLinkObject", "[", 
     RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
    RowBox[{"Install", "[", 
     RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], "]"}]}],
    ";", 
   RowBox[{
    RowBox[{"msGetBBGMakeLinkObject", "::", "usage"}], " ", "=", " ", 
    "\"\<msGetBBGMakeLinkObject[]: When run, launches the WSTP application \
that moves current data from Bloomberg to Mathematica. msGetBB[] will launch \
and kill this automatically, but you can do it manually with this function, \
assign the result to a variable, and pass the link to msGetBB[] with the \
\\\"LinkObject]\\\"\[Rule] option if you plan on calling it many times in \
succession.  This saves the overhead of relaunching the link for every call. \
When finished, can call Uninstall[(this link)] and the program will be quit. \
For most users it will be better to run msGetBBG[] with a list of tickers \
instead, as that approach returns data quicker (though tagged with each \
datum's ticker and potentially not in the same order those tickers were \
submitted to the function). Can set \\\"path to executable\\\" variable if \
the default is for some reason not what you want.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msGetBBG", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<noisy\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<outer noisy\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<LinkObject\>\"", "\[Rule]", "Null"}], ",", 
     RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Drop", "[", 
           RowBox[{
            RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], 
            ",", 
            RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
          "\"\<msGetBBGLink.exe\>\""}], "}"}], "]"}], "]"}]}], ",", 
     RowBox[{"\"\<overrides\>\"", "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msGetBBG", "[", 
    RowBox[{"ticker_", ",", "field_String", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "raw", ",", "exp", ",", "link", ",", "ticks", ",", "trimmed", ",", 
       "overrides"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"link", " ", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
           "LinkObject"}], ",", 
         RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"Install", "[", 
          RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], 
          "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "up", " ", "link", " ", "to", " ", 
        RowBox[{"C", "++"}], " ", "Code", " ", "if", " ", "needed"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"ticks", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "ticker", "]"}], ",", "ticker", ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"Riffle", "[", 
           RowBox[{"ticker", ",", "\"\< & \>\""}], "]"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<outer noisy\>\"", "]"}], "||", 
         RowBox[{"OptionValue", "[", "\"\<outer noisy\>\"", "]"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<ticks: \>\"", ",", "ticks"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"overrides", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"OptionValue", "[", "\"\<overrides\>\"", "]"}], "]"}], ">",
           "0"}], ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Keys", "[", 
               RowBox[{"OptionValue", "[", "\"\<overrides\>\"", "]"}], "]"}], 
              ",", 
              RowBox[{"Values", "[", 
               RowBox[{"OptionValue", "[", "\"\<overrides\>\"", "]"}], 
               "]"}]}], "]"}], ",", "\"\< & \>\""}], "]"}], "]"}], ",", 
         "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<outer noisy\>\"", "]"}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<overrides: \>\"", ",", "overrides", ",", " ", 
          "\"\<. (head: \>\"", ",", 
          RowBox[{"Head", "[", "overrides", "]"}], ",", "\"\<)\>\""}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"raw", "=", 
       RowBox[{"msGetBBGLink", "[", 
        RowBox[{"ticks", ",", "field", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", "1", ",", 
           "0"}], "]"}], ",", "overrides"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<outer noisy\>\"", "]"}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<raw Head: \>\"", ",", 
          RowBox[{"Head", "[", "raw", "]"}], ",", "\"\<. raw: \>\"", ",", 
          "raw"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
          "LinkObject"}], ",", "False", ",", 
        RowBox[{"Uninstall", "[", "link", "]"}]}], "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"close", " ", "link", " ", "if", " ", "needed"}], " ", "*)"}], 
      " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "raw", "]"}], "===", "msGetBBGLink"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"msGetBBG", "::", "linkDead"}], "]"}], ";", "Null"}], ",", 
        RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"StringContainsQ", "[", 
            RowBox[{"raw", ",", "\"\<EXCEPTION\>\""}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"trimmed", "=", 
            RowBox[{"StringTrim", "[", "raw", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"OptionValue", "[", "\"\<outer noisy\>\"", "]"}], ",", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<trimmed: \>\"", ",", "trimmed"}], "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"exp", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}]}], ",", 
              RowBox[{"ToExpression", "[", "trimmed", "]"}], ",", "trimmed"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "exp", "]"}], "===", "String"}], ",", 
             "raw", ",", "exp"}], "]"}]}], ",", 
          RowBox[{"(*", " ", 
           RowBox[{"else", ",", " ", 
            RowBox[{"had", " ", "exception"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "raw"}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msGetBBG", "::", "usage"}], " ", "=", " ", 
   "\"\<msGetBBG[Bloomberg ticker_String OR \
_List,field_String,OptionsPattern[]]. Connects to Bloomberg and downloads a \
single field's data for one or more securities. Fields that return multiple \
lines (like dividend history or current holders) will be delivered as Lists \
of Associations. The user may wish to wrap each of these in a Dataset.\n\nIf \
you plan on running msGetBB[] many times in close succession, run \
msGetBBGMakeLinkObject[] first and save the resulting LinkObject to a \
variable. You can then pass that LinkObject to msGetBB[] with the \
\\\"LinkObject\\\"\[Rule] option, and Uninstall[] it when you are done. If \
you want to check multiple securities at once, pass them all to the function \
as a list (e.g. msGetBBG[{\\\"AAPL US Equity\\\",\\\"IBM US \
Equity\\\"},\\\"DVD_EX_DT\\\"]). For long lists this is about 20x faster than \
calling the function repeatedly. If used in this manner, the function may \
return the answers out of order, but will attach the security name to each \
datum for identification.\n\nYou can pass overrides to the function with \
\\\"overrides\\\"\[Rule]<|\\\"field id 1\\\"\[Rule]\\\"value 1\\\", \\\"field \
id 2\\\"\[Rule]\\\"value two\\\", \\\"field id 3\\\"\[Rule]\\\"field \
three\\\"|>}. Check the FLDS command for a security on the Bloomberg terminal \
to see which overrides are allowed. You can include an arbitrary number of \
overrides.\n\nCan set the \\\"path to executable\\\" variable if the default \
is for some reason not what you want.\n\\\"noisy\\\"\[Rule]True will return \
debugging information from both the WSTP conduit and the Mathematica \
interface that calls it. \\\"outer noisy\\\"\[Rule]True will debugging \
information from only the Mathematica part.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msGetBBG", "::", "linkDead"}], "=", 
    "\"\<Could not connect to link. Perhaps it died before Mathematica could \
pass data to it.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msBBGgetHistoryMakeLinkObject", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], ",", 
           RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
         "\"\<msBBGgetHistoryLink.exe\>\""}], "}"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msBBGgetHistoryMakeLinkObject", "[", 
     RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
    RowBox[{"Install", "[", 
     RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], "]"}]}],
    ";", 
   RowBox[{
    RowBox[{"msBBGgetHistoryMakeLinkObject", "::", "usage"}], " ", "=", " ", 
    "\"\<msBBGgetHistoryMakeLinkObject[]: When run, launches the WSTP \
application that moves historical securities data from Bloomberg to \
Mathematica. msBBGgetHistory[] will launch and kill this automatically, but \
you can do it manually with this function, assign the result to a variable, \
and pass the link to msBBGgetHistory[] with the \\\"LinkObject]\\\"\[Rule] \
option if you plan on calling it many times in succession.  This saves the \
overhead of relaunching the link for every call. When finished, can call \
Uninstall[(this link)] and the program will be quit. Can set \\\"path to \
executable\\\" variable if the default is for some reason not what you \
want.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msBBGgetHistory", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<adjust\>\"", "\[Rule]", "\"\<CALENDAR\>\""}], ",", 
     RowBox[{"\"\<type\>\"", "\[Rule]", "\"\<value\>\""}], ",", 
     RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<df\>\""}], ",", 
     RowBox[{"\"\<output\>\"", "\[Rule]", "\"\<nf3\>\""}], 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"vs", ".", " ", "\"\<nf2\>\""}], " ", "or", " ", 
       "\"\<ts\>\""}], "*)"}], ",", 
     RowBox[{"\"\<noisy\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<use DPDF\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<LinkObject\>\"", "\[Rule]", "Null"}], ",", 
     RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Drop", "[", 
           RowBox[{
            RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], 
            ",", 
            RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
          "\"\<msBBGgetHistoryLink.exe\>\""}], "}"}], "]"}], "]"}]}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msBBGgetHistory", "[", 
    RowBox[{
    "ticker_String", ",", "field_String", ",", "start_", ",", "end_", ",", 
     "freq_String", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "raw", ",", "name1", ",", "output", ",", "link", ",", " ", "dateF", ",",
        "gotNada"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"name1", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<name\>\"", "]"}], "\[Equal]", 
          "\"\<df\>\""}], ",", 
         RowBox[{"ticker", "<>", "\"\<: \>\"", "<>", "field"}], ",", 
         RowBox[{"OptionValue", "[", "\"\<name\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"link", " ", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
           "LinkObject"}], ",", 
         RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"Install", "[", 
          RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], 
          "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "up", " ", "link", " ", "to", " ", 
        RowBox[{"C", "++"}], " ", "Code", " ", "if", " ", "needed"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dateF", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"ToUpperCase", "[", "freq", "]"}], " ", ",", "\"\<DAY\>\"", 
         ",", "\"\<DAILY\>\"", ",", "\"\<WEEK\>\"", ",", "\"\<WEEKLY\>\"", 
         ",", "\"\<MONTH\>\"", ",", "\"\<MONTHLY\>\"", ",", "\"\<QUARTER\>\"",
          ",", "\"\<QUARTERLY\>\"", ",", "\"\<YEAR\>\"", ",", 
         "\"\<YEARLY\>\"", ",", "\"\<ANNUAL\>\"", ",", "\"\<YEARLY\>\"", ",", 
         "_", ",", 
         RowBox[{"ToUpperCase", "[", "freq", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"raw", " ", "=", 
       RowBox[{"msBBGgetHistoryLink", "[", 
        RowBox[{"ticker", ",", " ", "field", ",", 
         RowBox[{"bbgifyDate", "[", "start", "]"}], ",", 
         RowBox[{"bbgifyDate", "[", "end", "]"}], ",", "dateF", ",", 
         RowBox[{"ToUpperCase", "[", 
          RowBox[{"OptionValue", "[", "\"\<adjust\>\"", "]"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<use DPDF\>\"", "]"}], ",", "1", 
           ",", "0"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", "1", ",", 
           "0"}], "]"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"output", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", "raw", ",", 
         RowBox[{"ToExpression", "[", "raw", "]"}]}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"use", " ", "ToExpression", " ", "to", " ", "convert", " ", 
        RowBox[{"C", "++"}], " ", "string", " ", "output", " ", "into", " ", 
        "list"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<raw: \>\"", ",", "raw"}], "]"}]}], "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
          "LinkObject"}], ",", "False", ",", 
        RowBox[{"Uninstall", "[", "link", "]"}]}], "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"close", " ", "link", " ", "if", " ", "needed"}], " ", "*)"}], 
      " ", "\[IndentingNewLine]", 
      RowBox[{"gotNada", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "output", "]"}], "\[Equal]", "0"}], " ", "&&",
           " ", 
          RowBox[{"!", 
           RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}]}]}], ",", 
         "True", ",", "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"!", 
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}]}], "&&", 
         RowBox[{"!", "gotNada"}]}], ",", 
        RowBox[{
         RowBox[{"output", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{
                 RowBox[{"DateList", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "3"}], "]"}], 
               ",", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", 
            "output"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"output", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<type\>\"", "]"}], ",", 
            "\"\<value\>\"", ",", 
            RowBox[{"TimeSeries", "[", "output", "]"}], ",", 
            "\"\<pctchanges\>\"", ",", 
            RowBox[{"EventSeries", "[", "output", "]"}], ",", "\"\<delta\>\"",
             ",", 
            RowBox[{"EventSeries", "[", "output", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"output", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<output\>\"", "]"}], ",", 
            "\[IndentingNewLine]", "\"\<nf2\>\"", ",", 
            RowBox[{"Association", "[", 
             RowBox[{
              RowBox[{"\"\<name\>\"", "\[Rule]", "name1"}], ",", 
              RowBox[{"\"\<type\>\"", "\[Rule]", 
               RowBox[{"OptionValue", "[", "\"\<type\>\"", "]"}]}], ",", 
              RowBox[{"\"\<data\>\"", "\[Rule]", "output"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "\"\<nf3\>\"", ",", 
            RowBox[{"TemporalData", "[", 
             RowBox[{"output", ",", 
              RowBox[{"MetaInformation", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<name\>\"", "\[Rule]", "name1"}], ",", 
                 RowBox[{"\"\<type\>\"", "\[Rule]", 
                  RowBox[{"OptionValue", "[", "\"\<type\>\"", "]"}]}]}], 
                "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", "\"\<ts\>\"", 
            ",", "output"}], "]"}]}]}], ",", "\[IndentingNewLine]", "gotNada",
         ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"msBBGgetHistory", "::", "nodata"}], ",", "ticker"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}]}], "&&", " ", 
         RowBox[{
          RowBox[{"StringLength", "[", "output", "]"}], "==", "0"}]}], ",", 
        RowBox[{
        "output", "=", 
         "\"\<Data not found. For more information, run with \\\"noisy\\\"\
\[Rule]True\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", "output"}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msBBGgetHistory", "::", "usage"}], " ", "=", " ", 
   "\[IndentingNewLine]", 
   "\"\<msBBGgetHistory[ticker_,field_,start_,end_,freq_,OptionsPattern[]] \
retrieves data from Bloomberg for a given ticker and field within the \
specified period.\nPARAMETERS:\nticker: e.g., \\\"AAPL Equity\\\"\nfield: \
e.g., \\\"Px_Last\\\"\nstart: start date\nend: end date, or \\\"\\\" for \
current day\nfreq: is the data frequency. Choices: \\\"day\\\", \\\"week\\\", \
\\\"month\\\", \\\"quarter\\\", or \\\"year\\\"\\n\n\nOptionally, you can \
pass  adjust\[Rule] for the period adjustment (default is \\\"CALENDAR\\\"). \
Choices, \\\"ACTUAL\\\", \\\"CALENDAR\\\"\ntype\[Rule] is one of \
\\\"delta\\\", \\\"pctchanges\\\", or (by default) \\\"value\\\". \nname\
\[Rule]\\\"whatever\\\" sets the name.\n\\\"output\\\"\[Rule]\\\"nf2\\\", \
\\\"nf3\\\" (the new default) or \\\"ts\\\". nf2 is an association with Keys \
\\\"data\\\", \\\"name\\\" and \\\"type\\\". nf3 is a TemporalData object \
with the same information in MetaInformation. \\\"ts\\\" leaves out the \
MetaInformation.\n\\\"noisy\\\"\[Rule](True or False), toggles debugging info\
\n\\\"use DPDF\\\"\[Rule](True or False), toggles whether or not the DPDF \
settings in the Bloomberg terminal are respected. This would typically be \
used to shut off dividend adjustment, if it has been turned on.\n\
\\\"LinkObject\\\" can be passed a link object created by \
msBBGgetHistoryMakeLinkObject[], saving the overhead of re-launching the \
link. If you do this, later Uninstall[] the link.\n\\\"path to executable\\\"\
\[Rule]should be set to the correct place by default but if you have more \
than one version of the executable, for example, you can pick one by setting \
the path here.\n\nBy default, pctchanges and delta-type data are stored as \
EventSeries[], while value-type data is stored as TimesSeries[].\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msBBGgetHistory", "::", "nodata"}], "=", 
    "\"\<No data found for this time period for `1`.\>\""}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msBBGetIntradayMakeLinkObject", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], ",", 
           RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
         "\"\<BBRetrieveIntraday.exe\>\""}], "}"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msBBGetIntradayMakeLinkObject", "[", 
     RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
    RowBox[{"Install", "[", 
     RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], "]"}]}],
    ";", 
   RowBox[{
    RowBox[{"msBBGetIntradayMakeLinkObject", "::", "usage"}], " ", "=", " ", 
    "\"\<msBBGetIntradayMakeLinkObject[]: When run, launches the WSTP \
application that moves historical intraday data from Bloomberg to \
Mathematica. msBBGetIntraday[] will launch and kill this automatically, but \
you can do it manually with this function, assign the result to a variable, \
and pass the link to msBBGetIntraday[] with the \\\"LinkObject]\\\"\[Rule] \
option if you plan on calling it many times in succession.  This saves the \
overhead of relaunching the link for every call. When finished, can call \
Uninstall[(this link)] and the program will be quit. Can set \\\"path to \
executable\\\" variable if the default is for some reason not what you \
want.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "msBBGetIntraday", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<daylightsaving start\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"2015", ",", "3", ",", "8"}], "}"}]}], ",", 
      RowBox[{"\"\<daylightsaving end\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"2015", ",", "11", ",", "1"}], "}"}]}], ",", 
      RowBox[{"\"\<tick type\>\"", "\[Rule]", "\"\<TRADE\>\""}], ",", 
      RowBox[{"\"\<LinkObject\>\"", "\[Rule]", "Null"}], ",", 
      RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], 
             ",", 
             RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
           "\"\<BBRetrieveIntraday.exe\>\""}], "}"}], "]"}], "]"}]}], ",", 
      RowBox[{"\"\<output\>\"", "\[Rule]", "Association"}]}], 
     RowBox[{"(*", 
      RowBox[{"or", " ", "List"}], "*)"}], "}"}]}], ";", 
   RowBox[{
    RowBox[{"msBBGetIntraday", "[", 
     RowBox[{
     "ticker_String", ",", "starttime_DateObject", ",", "endtime_DateObject", 
      ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "output", ",", " ", "link", ",", "st", ",", "et", ",", 
        "daylighttimezone", ",", "dateformat", ",", "x", ",", "fld", ",", 
        "ok"}], "}"}], ",", " ", 
      RowBox[{
       RowBox[{"ok", "=", "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<trade\>\"", ",", "\"\<bid\>\"", ",", "\"\<ask\>\""}],
             "}"}], ",", 
           RowBox[{"ToLowerCase", "[", 
            RowBox[{"OptionValue", "[", "\"\<tick type\>\"", "]"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"fld", "=", 
          RowBox[{"ToUpperCase", "[", 
           RowBox[{"OptionValue", "[", "\"\<tick type\>\"", "]"}], "]"}]}], 
         ",", 
         RowBox[{"ok", "=", "False"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"link", " ", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
            "LinkObject"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], ",", 
          "\[IndentingNewLine]", " ", 
          RowBox[{"Install", "[", 
           RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], 
           "]"}]}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "up", " ", "link", " ", "to", " ", 
         RowBox[{"C", "++"}], " ", "Code", " ", "if", " ", "needed"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"daylighttimezone", " ", "=", " ", 
        RowBox[{"-", "4"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dateformat", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Year\>\"", ",", "\"\<-\>\"", ",", "\"\<Month\>\"", ",", 
          "\"\<-\>\"", ",", "\"\<Day\>\"", ",", "\"\<T\>\"", ",", 
          "\"\<Time\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"st", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", "starttime", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"st", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"AbsoluteTime", "[", 
             RowBox[{
             "OptionValue", "[", "\"\<daylightsaving start\>\"", "]"}], "]"}],
             "\[LessEqual]", "st"}], "&&", 
           RowBox[{
            RowBox[{"AbsoluteTime", "[", 
             RowBox[{"OptionValue", "[", "\"\<daylightsaving end\>\"", "]"}], 
             "]"}], "\[GreaterEqual]", " ", "st"}]}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"st", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "daylighttimezone"}], ",", "\"\<Hour\>\""}], 
                "}"}]}], "]"}], "]"}], ",", "dateformat"}], "]"}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"st", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"daylighttimezone", "-", "1"}], ")"}]}], ",", 
                 "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], ",", "dateformat"}],
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"et", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", "endtime", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"et", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"AbsoluteTime", "[", 
             RowBox[{
             "OptionValue", "[", "\"\<daylightsaving start\>\"", "]"}], "]"}],
             "\[LessEqual]", "et"}], "&&", 
           RowBox[{
            RowBox[{"AbsoluteTime", "[", 
             RowBox[{"OptionValue", "[", "\"\<daylightsaving end\>\"", "]"}], 
             "]"}], "\[GreaterEqual]", " ", "et"}]}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"et", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "daylighttimezone"}], ",", "\"\<Hour\>\""}], 
                "}"}]}], "]"}], "]"}], ",", "dateformat"}], "]"}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"et", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"daylighttimezone", "-", "1"}], ")"}]}], ",", 
                 "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], ",", "dateformat"}],
            "]"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"BBRetrieveIntraday", "[", 
         RowBox[{"ticker", ",", "fld", ",", "st", ",", "et"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"ToExpression", "[", "x", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"using", " ", "ToExpression", " ", "to", " ", "convert", " ", 
         RowBox[{"C", "++"}], " ", "string", " ", "output", " ", "into", " ", 
         "list"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"output", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"AbsoluteTime", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"StringDrop", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"-", "10"}]}], "]"}], ",", "dateformat"}], "}"}], 
              "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "&"}], ",", "output"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"AbsoluteTime", "[", 
                  RowBox[{
                  "OptionValue", "[", "\"\<daylightsaving start\>\"", "]"}], 
                  "]"}], "\[LessEqual]", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "&&", " ", 
                RowBox[{
                 RowBox[{"AbsoluteTime", "[", 
                  RowBox[{
                  "OptionValue", "[", "\"\<daylightsaving end\>\"", "]"}], 
                  "]"}], "\[GreaterEqual]", " ", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
               RowBox[{"DateObject", "[", 
                RowBox[{"DateList", "[", 
                 RowBox[{"DatePlus", "[", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"daylighttimezone", ",", "\"\<Hour\>\""}], 
                    "}"}]}], "]"}], "]"}], "]"}], ",", 
               RowBox[{"DateObject", "[", 
                RowBox[{"DateList", "[", 
                 RowBox[{"DatePlus", "[", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"daylighttimezone", "-", "1"}], ",", 
                    "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], "]"}]}], "]"}], 
             ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "&"}], ",", "output"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<output\>\"", "]"}], "===", 
           "List"}], ",", "output", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Time\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Price\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Size\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}]}]}], "|>"}], "&"}], ",", 
            "output"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
           "LinkObject"}], ",", "False", ",", 
         RowBox[{"Uninstall", "[", "link", "]"}]}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"close", " ", "link", " ", "if", " ", "needed"}], " ", "*)"}],
        " ", "\[IndentingNewLine]", " ", "output"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msBBGetIntraday", "::", "usage"}], " ", "=", " ", 
    "\[IndentingNewLine]", 
    "\"\<msBBGetIntraday[ticker_,starttime_,endtime_] retrieves intraday \
ticks from Bloomberg for a given ticker within the specified period. \n\
PARAMETERS:\nticker: e.g., \\\"AAPL Equity\\\"\nstarttime: DateObject \
indicating start date and time\nendtime: DateObject indicating end date and \
time.\n\nBloomberg seems to save detailed intraday data back six months.\n\n\
By default returns trade data, but can set option \\\"tick type\\\" to \
\\\"BID\\\" or \\\"ASK\\\" if you want something different.\n\nReturns a \
three-member list for every datapoint available: {time, price, size}. Pass \\\
\"output\\\"\[Rule]Association if you prefer an Association to the list. \
Oother optional parameters include \\\"\!\(\*
StyleBox[\"daylightsaving\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"beg\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"\\\\\\\"\",
FontVariations->{\"Underline\"->True}]\) and \\\"\!\(\*
StyleBox[\"daylightsaving\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"end\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"\\\\\\\"\",
FontVariations->{\"Underline\"->True}]\), which change every year. For a \
liquid security, the number of datapoints here is likely to be enormous, and \
you may want to consider using msBBGetIntradayBars[] instead.\n\n\
\\\"LinkObject\\\" can be passed a link object created by \
msBBGetIntradayMakeLinkObject[], saving the overhead of re-launching the \
link. If you do this, later Uninstall[] the link.\n\\\"path to executable\\\"\
\[Rule]should be set to the correct place by default but if you have more \
than one version of the executable, for example, you can pick one by setting \
the path here.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msBBGetIntradayBarsMakeLinkObject", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], ",", 
           RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
         "\"\<BBRetrieveIntradayBars.exe\>\""}], "}"}], "]"}], "]"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msBBGetIntradayBarsMakeLinkObject", "[", 
     RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
    RowBox[{"Install", "[", 
     RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], "]"}]}],
    ";", 
   RowBox[{
    RowBox[{"msBBGetIntradayBarsMakeLinkObject", "::", "usage"}], " ", "=", 
    " ", "\"\<msBBGetIntradayBarsMakeLinkObject[]: When run, launches the \
WSTP application that moves historical intraday bar data from Bloomberg to \
Mathematica. msBBGetIntradayBars[] will launch and kill this automatically, \
but you can do it manually with this function, assign the result to a \
variable, and pass the link to msBBGetIntradayBars[] with the \\\"LinkObject]\
\\\"\[Rule] option if you plan on calling it many times in succession.  This \
saves the overhead of relaunching the link for every call. When finished, can \
call Uninstall[(this link)] and the program will be quit. Can set \\\"path to \
executable\\\" variable if the default is for some reason not what you \
want.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "msBBGetIntradayBars", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<daylightsaving start\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"2015", ",", "3", ",", "8"}], "}"}]}], ",", 
      RowBox[{"\"\<daylightsaving end\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"2015", ",", "11", ",", "1"}], "}"}]}], ",", 
      RowBox[{"\"\<fill\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<tick type\>\"", "\[Rule]", "\"\<TRADE\>\""}], ",", 
      RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"FileNameSplit", "[", "$InstallationDirectory", "]"}], 
             ",", 
             RowBox[{"-", "2"}]}], "]"}], ",", "\"\<msFunctions\>\"", ",", 
           "\"\<BBRetrieveIntradayBars.exe\>\""}], "}"}], "]"}], "]"}]}], ",", 
      RowBox[{"\"\<LinkObject\>\"", "\[Rule]", "Null"}], ",", 
      RowBox[{"\"\<output\>\"", "\[Rule]", "Association"}]}], 
     RowBox[{"(*", 
      RowBox[{"or", " ", "List"}], "*)"}], "}"}]}], ";", 
   RowBox[{
    RowBox[{"msBBGetIntradayBars", "[", 
     RowBox[{
     "ticker_String", ",", "starttime_DateObject", ",", "endtime_DateObject", 
      ",", 
      RowBox[{"barsize_", "/;", 
       RowBox[{"NumberQ", "[", "barsize", "]"}]}], ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "output", ",", " ", "link", ",", "st", ",", "et", ",", "x", ",", 
        "daylighttimezone", ",", "dateformat", ",", "fld", ",", "ok", ",", 
        "dsb", ",", "dse"}], "}"}], ",", "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"ok", "=", "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<trade\>\"", ",", "\"\<bid\>\"", ",", "\"\<ask\>\""}],
             "}"}], ",", 
           RowBox[{"ToLowerCase", "[", 
            RowBox[{"OptionValue", "[", "\"\<tick type\>\"", "]"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"fld", "=", 
          RowBox[{"ToUpperCase", "[", 
           RowBox[{"OptionValue", "[", "\"\<tick type\>\"", "]"}], "]"}]}], 
         ",", 
         RowBox[{"ok", "=", "False"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"link", " ", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
            "LinkObject"}], ",", 
          RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], ",", 
          "\[IndentingNewLine]", " ", 
          RowBox[{"Install", "[", 
           RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], 
           "]"}]}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"set", " ", "up", " ", "link", " ", "to", " ", 
         RowBox[{"C", "++"}], " ", "Code", " ", "if", " ", "needed"}], " ", 
        "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"dsb", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", 
         RowBox[{"OptionValue", "[", "\"\<daylightsaving start\>\"", "]"}], 
         "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
        "Remember", " ", "to", " ", "reset", " ", "this", " ", "every", " ", 
         "year"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"dse", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", 
         RowBox[{"OptionValue", "[", "\"\<daylightsaving end\>\"", "]"}], 
         "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "Remember", " ", "to", " ", "reset", " ", "this", " ", "every", " ", 
         "year"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"daylighttimezone", " ", "=", " ", 
        RowBox[{"-", "4"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dateformat", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Year\>\"", ",", "\"\<-\>\"", ",", "\"\<Month\>\"", ",", 
          "\"\<-\>\"", ",", "\"\<Day\>\"", ",", "\"\<T\>\"", ",", 
          "\"\<Time\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"st", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", "starttime", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"st", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"dsb", "\[LessEqual]", "st"}], "&&", 
           RowBox[{"dse", "\[GreaterEqual]", " ", "st"}]}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"st", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "daylighttimezone"}], ",", "\"\<Hour\>\""}], 
                "}"}]}], "]"}], "]"}], ",", "dateformat"}], "]"}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"st", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"daylighttimezone", "-", "1"}], ")"}]}], ",", 
                 "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], ",", "dateformat"}],
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"et", " ", "=", " ", 
        RowBox[{"AbsoluteTime", "[", "endtime", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"et", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"dsb", "\[LessEqual]", "et"}], "&&", 
           RowBox[{"dse", "\[GreaterEqual]", " ", "et"}]}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"et", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "daylighttimezone"}], ",", "\"\<Hour\>\""}], 
                "}"}]}], "]"}], "]"}], ",", "dateformat"}], "]"}], ",", 
          RowBox[{"DateString", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"DatePlus", "[", 
              RowBox[{"et", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{"daylighttimezone", "-", "1"}], ")"}]}], ",", 
                 "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], ",", "dateformat"}],
            "]"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"BBRetrieveIntradayBars", "[", 
         RowBox[{
         "ticker", ",", "fld", ",", "st", ",", "et", ",", "barsize", ",", 
          RowBox[{"OptionValue", "[", "\"\<fill\>\"", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"ToExpression", "[", "x", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"using", " ", "ToExpression", " ", "to", " ", "convert", " ", 
         RowBox[{"C", "++"}], " ", "string", " ", "output", " ", "into", " ", 
         "list"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"dsb", "\[LessEqual]", 
                 RowBox[{"AbsoluteTime", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", "10"}]}], "]"}], ",", "dateformat"}], "}"}], 
                  "]"}]}], "&&", " ", 
                RowBox[{"dse", "\[GreaterEqual]", " ", 
                 RowBox[{"AbsoluteTime", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", "10"}]}], "]"}], ",", "dateformat"}], "}"}], 
                  "]"}]}]}], ",", 
               RowBox[{"DateObject", "[", 
                RowBox[{"DateList", "[", 
                 RowBox[{"DatePlus", "[", 
                  RowBox[{
                   RowBox[{"AbsoluteTime", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", "10"}]}], "]"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"daylighttimezone", ",", "\"\<Hour\>\""}], 
                    "}"}]}], "]"}], "]"}], "]"}], ",", 
               RowBox[{"DateObject", "[", 
                RowBox[{"DateList", "[", 
                 RowBox[{"DatePlus", "[", 
                  RowBox[{
                   RowBox[{"AbsoluteTime", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", "10"}]}], "]"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"daylighttimezone", "-", "1"}], ",", 
                    "\"\<Hour\>\""}], "}"}]}], "]"}], "]"}], "]"}]}], "]"}], 
             ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "4", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "5", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "6", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "7", "]"}], "]"}]}], "}"}], "&"}], ",", "output"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"output", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<output\>\"", "]"}], "===", 
           "List"}], ",", "output", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Time\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Open\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<High\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Low\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Close\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "5", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Tick Counts\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "6", "]"}], "]"}]}], ",", 
               RowBox[{"\"\<Shares\>\"", "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "7", "]"}], "]"}]}]}], "|>"}], "&"}], ",", 
            "output"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
           "LinkObject"}], ",", "False", ",", 
         RowBox[{"Uninstall", "[", "link", "]"}]}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"close", " ", "link", " ", "if", " ", "needed"}], " ", "*)"}],
        " ", "\[IndentingNewLine]", " ", "output"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msBBGetIntradayBars", "::", "usage"}], " ", "=", " ", 
   "\[IndentingNewLine]", 
   "\"\<msBBGetIntradayBars[ticker_,starttime_,endtime_,barsize_] retrieves \
intraday samples from Bloomberg for a given ticker within the specified \
period. \nPARAMETERS:\nticker: e.g., \\\"AAPL Equity\\\"\nstarttime: \
DateObject indicating start date and time\nendtime: DateObject indicating end \
date and time\nbarsize: is the sample frequency, in minutes\nOptionally, can \
pass\n\t\\\"tick type\\\" \[Rule]  \\\"TRADE\\\" or \\\"BID\\\" or \
\\\"ASK\\\", and/or\n\t\\\"fill\\\"\[Rule] If this is set to 1, the API will \
append previous day close information as first datapoint as the start of \
trading for the specified period. Otherwise, the first data point will be the \
actual first trading on that day.\n\nBloomberg seems to save detailed \
intraday data back six months.\n\nReturns seven items for each bar \
\[LongDash]\n1: Time\n2: Open\n3: High\n4: Low\n5: Close\n6: Tick Counts per \
bar\n7: Shares per bar\n\nBy default returns these in List format, but pass \
\\\"output\\\"\[Rule]Association if you prefer it that way.\n\\\"LinkObject\\\
\" can be passed a link object created by \
msBBGetIntradayBarsMakeLinkObject[], saving the overhead of re-launching the \
link. If you do this, later Uninstall[] the link.\n\\\"path to executable\\\"\
\[Rule]should be set to the correct place by default but if you have more \
than one version of the executable, for example, you can pick one by setting \
the path here.\n\nIf you want every trade, rather than periodic samples, use \
msBBGetIntraday[].\>\""}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.43377820609375*^9, 3.433778217125*^9}, {
   3.433778369359375*^9, 3.4337783988125*^9}, {3.433778468640625*^9, 
   3.433778489890625*^9}, {3.433778538796875*^9, 3.4337785634375*^9}, {
   3.433778790203125*^9, 3.433778845015625*^9}, {3.433778883484375*^9, 
   3.43377897465625*^9}, {3.43377905840625*^9, 3.4337794041875*^9}, {
   3.43377961803125*^9, 3.433779682890625*^9}, {3.433779729625*^9, 
   3.433779897828125*^9}, {3.4337799566875*^9, 3.4337799731875*^9}, {
   3.433780884796875*^9, 3.433780946109375*^9}, {3.433781254125*^9, 
   3.433781322390625*^9}, {3.433781357421875*^9, 3.43378158246875*^9}, 
   3.433781778125*^9, {3.433782220828125*^9, 3.43378224171875*^9}, {
   3.43378227840625*^9, 3.433782299484375*^9}, {3.433782354078125*^9, 
   3.43378242434375*^9}, {3.4337824698125*^9, 3.4337824986875*^9}, {
   3.433782655109375*^9, 3.433782658078125*^9}, {3.43378277053125*^9, 
   3.433782774078125*^9}, {3.433783084765625*^9, 3.433783159296875*^9}, {
   3.4337836699375*^9, 3.433783686203125*^9}, {3.43378376453125*^9, 
   3.43378379465625*^9}, {3.4337839035625*^9, 3.43378393*^9}, {
   3.4337840006875*^9, 3.433784010015625*^9}, {3.43378433059375*^9, 
   3.43378439140625*^9}, {3.43378443309375*^9, 3.433784477609375*^9}, {
   3.433784914015625*^9, 3.433784925765625*^9}, {3.449484662119875*^9, 
   3.4494846632605*^9}, {3.451214767875*^9, 3.451214772609375*^9}, {
   3.451214839390625*^9, 3.45121488534375*^9}, {3.451215319578125*^9, 
   3.451215326109375*^9}, {3.45121551015625*^9, 3.451215610640625*^9}, {
   3.45121574925*^9, 3.4512157503125*^9}, {3.451215789109375*^9, 
   3.4512158235625*^9}, {3.45121654265625*^9, 3.451216554578125*^9}, {
   3.45122493940625*^9, 3.451224945359375*^9}, {3.453720309296875*^9, 
   3.453720373859375*^9}, {3.453722020296875*^9, 3.4537221075*^9}, {
   3.453722138390625*^9, 3.4537222125*^9}, {3.453722867875*^9, 
   3.45372286840625*^9}, {3.45372289959375*^9, 3.4537229055625*^9}, {
   3.4537229406875*^9, 3.453722942203125*^9}, {3.453723266109375*^9, 
   3.4537233575*^9}, {3.453723671984375*^9, 3.453723679453125*^9}, {
   3.45372474390625*^9, 3.453724763796875*^9}, {3.45372495090625*^9, 
   3.4537249681875*^9}, {3.4537250716875*^9, 3.453725085953125*^9}, {
   3.453725140265625*^9, 3.45372516584375*^9}, {3.453725229140625*^9, 
   3.453725280875*^9}, {3.453726303921875*^9, 3.45372640371875*^9}, {
   3.45372648965625*^9, 3.453726493890625*^9}, {3.45372677446875*^9, 
   3.453726790484375*^9}, {3.454587560147625*^9, 3.4545875931945*^9}, {
   3.454587712491375*^9, 3.45458773335075*^9}, {3.45458779828825*^9, 
   3.454587813741375*^9}, {3.45468062529675*^9, 3.4546806765155*^9}, {
   3.45468071492175*^9, 3.45468099385925*^9}, {3.454681101093625*^9, 
   3.454681168578*^9}, {3.454681264281125*^9, 3.45468127704675*^9}, {
   3.4552881827285*^9, 3.455288186462875*^9}, {3.455288241087875*^9, 
   3.455288255712875*^9}, {3.455288573806625*^9, 3.455288596291*^9}, {
   3.45528868075975*^9, 3.45528868719725*^9}, {3.455289061306625*^9, 
   3.455289062962875*^9}, {3.45528922063475*^9, 3.455289289150375*^9}, {
   3.455289391400375*^9, 3.455289402494125*^9}, {3.45528944500975*^9, 
   3.455289495681625*^9}, {3.455289528025375*^9, 3.455289531916*^9}, {
   3.455289602056625*^9, 3.455289645166*^9}, {3.45528996400975*^9, 
   3.455290069931625*^9}, {3.455290252291*^9, 3.455290341025375*^9}, {
   3.455290674541*^9, 3.45529072182225*^9}, {3.45529085113475*^9, 
   3.455290897025375*^9}, {3.455291050244125*^9, 3.455291062416*^9}, {
   3.455291173275375*^9, 3.45529123819725*^9}, {3.455291320712875*^9, 
   3.455291354494125*^9}, {3.455291486525375*^9, 3.45529149082225*^9}, {
   3.4552915826035*^9, 3.455291590650375*^9}, {3.455291871525375*^9, 
   3.455291880041*^9}, {3.45529204319725*^9, 3.45529207863475*^9}, {
   3.4554578317285*^9, 3.45545787838475*^9}, {3.455458073619125*^9, 
   3.45545808157225*^9}, {3.4554581147285*^9, 3.455458120025375*^9}, {
   3.45545910250975*^9, 3.45545916763475*^9}, {3.455459276869125*^9, 
   3.45545931825975*^9}, {3.455459634994125*^9, 3.455459642056625*^9}, {
   3.455459690650375*^9, 3.45545973613475*^9}, {3.455459797306625*^9, 
   3.455459798462875*^9}, {3.455459860681625*^9, 3.45545986132225*^9}, {
   3.4554599044785*^9, 3.45545993744725*^9}, {3.455460045837875*^9, 
   3.45546004688475*^9}, {3.45546026813475*^9, 3.455460272806625*^9}, {
   3.45546059400975*^9, 3.45546066425975*^9}, {3.455460694400375*^9, 
   3.455460717244125*^9}, {3.455460798541*^9, 3.455460887900375*^9}, {
   3.455461010400375*^9, 3.455461048166*^9}, {3.455461084041*^9, 
   3.45546111444725*^9}, {3.45546122513475*^9, 3.455461234931625*^9}, {
   3.45546146963475*^9, 3.4554614739785*^9}, {3.455461523775375*^9, 
   3.45546153900975*^9}, {3.4554616149785*^9, 3.45546163294725*^9}, {
   3.45546179269725*^9, 3.455461796275375*^9}, {3.455464796712875*^9, 
   3.455464836041*^9}, {3.455464866494125*^9, 3.455464874494125*^9}, {
   3.455464932962875*^9, 3.4554649664785*^9}, {3.455465118931625*^9, 
   3.45546520775975*^9}, {3.455465384369125*^9, 3.45546538863475*^9}, {
   3.455465549837875*^9, 3.455465572119125*^9}, {3.45546563457225*^9, 
   3.45546563869725*^9}, {3.459185233875*^9, 3.45918524546875*^9}, {
   3.459185435109375*^9, 3.459185441234375*^9}, {3.45918557815625*^9, 
   3.459185583578125*^9}, {3.459187231875*^9, 3.459187239453125*^9}, {
   3.459187282234375*^9, 3.459187326484375*^9}, {3.459529027456584*^9, 
   3.459529046534709*^9}, {3.459532667394084*^9, 3.459532678050334*^9}, {
   3.459532741128459*^9, 3.459532768284709*^9}, {3.459533542565959*^9, 
   3.459533546144084*^9}, {3.459534496519084*^9, 3.459534536675334*^9}, {
   3.459534620300334*^9, 3.459534728894084*^9}, {3.459534915940959*^9, 
   3.459534982831584*^9}, 3.459535023722209*^9, {3.459535362222209*^9, 
   3.459535465019084*^9}, {3.459535502128459*^9, 3.459535548972209*^9}, {
   3.459535585190959*^9, 3.459535707987834*^9}, {3.459535856534709*^9, 
   3.459535864237834*^9}, {3.459536151175334*^9, 3.459536222284709*^9}, 
   3.459536318300334*^9, {3.459537205144084*^9, 3.459537233909709*^9}, {
   3.459537568847209*^9, 3.459537569409709*^9}, {3.459537695534709*^9, 
   3.459537839206584*^9}, {3.459537888769084*^9, 3.459537973987834*^9}, {
   3.459538071300334*^9, 3.459538072112834*^9}, {3.459538155347209*^9, 
   3.459538159519084*^9}, {3.459538236456584*^9, 3.459538237159709*^9}, {
   3.459538576409709*^9, 3.459538629019084*^9}, {3.459538678378459*^9, 
   3.459538679487834*^9}, {3.459538711581584*^9, 3.459538919940959*^9}, 
   3.459539029862834*^9, {3.462038129234375*^9, 3.46203813575*^9}, {
   3.46385132571227*^9, 3.46385134505602*^9}, 3.4657441558764753`*^9, {
   3.4657442125610733`*^9, 3.4657442129673023`*^9}, {3.5030681517865*^9, 
   3.503068190802125*^9}, {3.503068220864625*^9, 3.503068228599*^9}, {
   3.503068278927125*^9, 3.503068315270875*^9}, {3.503068670677125*^9, 
   3.5030687025365*^9}, {3.50306873606775*^9, 3.50306875813025*^9}, {
   3.548603887564625*^9, 3.548603940939625*^9}, {3.54860416989275*^9, 
   3.5486041943615*^9}, {3.548604243127125*^9, 3.54860425789275*^9}, {
   3.548604323049*^9, 3.548604446595875*^9}, {3.54860625558025*^9, 
   3.548606495939625*^9}, {3.5486067067365*^9, 3.548606706877125*^9}, {
   3.548606782002125*^9, 3.54860681533025*^9}, {3.548673457924*^9, 
   3.548673467877125*^9}, {3.54867358195525*^9, 3.548673739314625*^9}, {
   3.590445344182831*^9, 3.5904453470088997`*^9}, {3.6029612011376295`*^9, 
   3.6029613030754604`*^9}, {3.6158181720349517`*^9, 
   3.6158182280225496`*^9}, {3.6158183792316694`*^9, 3.615818521505895*^9}, {
   3.63050412370323*^9, 3.630504136087242*^9}, {3.6328433638612823`*^9, 
   3.632843465320928*^9}, {3.632862246113303*^9, 3.632862326916292*^9}, {
   3.63286238795494*^9, 3.632862472215893*^9}, {3.632862524863677*^9, 
   3.6328626737292547`*^9}, {3.6328627114479303`*^9, 3.6328627202744102`*^9}, 
   3.632862754667706*^9, {3.632862803575556*^9, 3.6328630005677967`*^9}, {
   3.632863069857132*^9, 3.632863295744474*^9}, {3.6328645987348833`*^9, 
   3.6328646189543047`*^9}, {3.632864651080536*^9, 3.632864788288644*^9}, {
   3.6328648485876303`*^9, 3.6328649295593452`*^9}, {3.632868125612153*^9, 
   3.632868135799319*^9}, {3.6328699786141195`*^9, 3.6328699966146407`*^9}, {
   3.6328700595077205`*^9, 3.632870082211614*^9}, {3.6328701166510706`*^9, 
   3.632870182516685*^9}, {3.632870247425474*^9, 3.6328704258534017`*^9}, {
   3.632870462526541*^9, 3.632870489731013*^9}, {3.632870539983821*^9, 
   3.632870549609159*^9}, {3.632870721365389*^9, 3.6328707648981543`*^9}, {
   3.6328708381977234`*^9, 3.6328708382606897`*^9}, {3.6328708936840315`*^9, 
   3.6328708953089223`*^9}, {3.6328709846248083`*^9, 3.632871002000211*^9}, {
   3.632871032391883*^9, 3.6328710920355396`*^9}, 3.6328711340205946`*^9, {
   3.63287118002214*^9, 3.6328712716977944`*^9}, {3.632871801802657*^9, 
   3.632871840132388*^9}, {3.6328718796026993`*^9, 3.6328719371833634`*^9}, {
   3.632872019076294*^9, 3.632872049155695*^9}, {3.633088572773142*^9, 
   3.6330886933246317`*^9}, {3.63308873526328*^9, 3.633088784686661*^9}, {
   3.6330891415677347`*^9, 3.6330891909759674`*^9}, {3.633089237836506*^9, 
   3.6330893099336863`*^9}, {3.6330894055627723`*^9, 
   3.6330894276558294`*^9}, {3.6330894861089554`*^9, 3.633089543050373*^9}, {
   3.6330898285609303`*^9, 3.633089838436306*^9}, {3.6330899412366858`*^9, 
   3.633089989285503*^9}, {3.6330900565378237`*^9, 3.633090062303399*^9}, {
   3.6330901037371984`*^9, 3.6330901043934517`*^9}, {3.6573085395738707`*^9, 
   3.657308617610244*^9}, {3.659567342246573*^9, 3.659567470691842*^9}, {
   3.659567589066497*^9, 3.659567621393968*^9}, {3.659567654847868*^9, 
   3.659567857141746*^9}, {3.659567944102331*^9, 3.6595680047638693`*^9}, {
   3.664139202067233*^9, 3.6641394350445585`*^9}, {3.6641512429599323`*^9, 
   3.6641513114108477`*^9}, {3.6641954785376067`*^9, 3.664195563619473*^9}, {
   3.6641955996625347`*^9, 3.6641956112962*^9}, {3.664195786875242*^9, 
   3.664195835681034*^9}, {3.6641958731061745`*^9, 3.664195873651206*^9}, {
   3.6641959084201946`*^9, 3.664195966303505*^9}, {3.6641963921188602`*^9, 
   3.66419640225344*^9}, {3.6641965524910336`*^9, 3.6641966296404457`*^9}, {
   3.6641966756060753`*^9, 3.6641967107050824`*^9}, 3.6641967606329384`*^9, {
   3.6641970515035753`*^9, 3.6641970516895857`*^9}, {3.6641972613305764`*^9, 
   3.6641972652338*^9}, {3.666113933113752*^9, 3.6661139603413925`*^9}, {
   3.6663626693952017`*^9, 3.666362669478206*^9}, {3.6663629568456426`*^9, 
   3.666363184449661*^9}, {3.6663634874649925`*^9, 3.6663635598531327`*^9}, {
   3.6663635990733757`*^9, 3.6663636153593073`*^9}, {3.666363655165584*^9, 
   3.6663636658351946`*^9}, {3.666363764972865*^9, 3.6663638320567017`*^9}, {
   3.6663639139133835`*^9, 3.666363928860239*^9}, {3.666364135630065*^9, 
   3.6663642708047967`*^9}, 3.666364329104131*^9, {3.6663644673670397`*^9, 
   3.6663645572531805`*^9}, {3.6663645937512684`*^9, 
   3.6663645941622915`*^9}, {3.6663646249830546`*^9, 
   3.6663646542687297`*^9}, {3.6663646871756115`*^9, 3.666364721328565*^9}, {
   3.666365011001134*^9, 3.6663650989001613`*^9}, {3.666365131118004*^9, 
   3.6663652776083827`*^9}, 3.666365325616129*^9, {3.6663659480627303`*^9, 
   3.666365960138421*^9}, {3.666367600699256*^9, 3.666367637862382*^9}, {
   3.66636789729222*^9, 3.666367987938405*^9}, {3.6663680773365183`*^9, 
   3.666368085278972*^9}, {3.6663691156549063`*^9, 3.666369121649249*^9}, {
   3.666608412714609*^9, 3.666608439611147*^9}, {3.666608498381509*^9, 
   3.666608540449915*^9}, {3.666608894489165*^9, 3.6666089338864183`*^9}, {
   3.666609026286703*^9, 3.666609031171983*^9}, {3.6666091071013255`*^9, 
   3.666609173246109*^9}, {3.6666092285412717`*^9, 3.6666092625432167`*^9}, {
   3.666700732687481*^9, 3.666700751386751*^9}, {3.666701369608206*^9, 
   3.6667014644935923`*^9}, {3.6667015477135887`*^9, 3.66670154846029*^9}, {
   3.666704644246835*^9, 3.666704848821536*^9}, {3.6667048993564267`*^9, 
   3.666704934089413*^9}, {3.666706203536021*^9, 3.6667062079772754`*^9}, {
   3.666706646229342*^9, 3.6667066466763678`*^9}, 3.666706742297837*^9, 
   3.667243136587569*^9, {3.6672431945158825`*^9, 3.667243201710294*^9}, {
   3.667243267586062*^9, 3.667243269033145*^9}, {3.667244396778648*^9, 
   3.667244400339852*^9}, {3.667641843944187*^9, 3.6676418560728807`*^9}, {
   3.6676419272009487`*^9, 3.6676419819470806`*^9}, {3.667645812378168*^9, 
   3.667645834177415*^9}, {3.6699835797393556`*^9, 3.669983601050575*^9}, {
   3.669983637645668*^9, 3.669983639900797*^9}, {3.6699836974510884`*^9, 
   3.669983701346311*^9}, {3.6699839922899523`*^9, 3.6699840069757924`*^9}, {
   3.6699845215272226`*^9, 3.6699845269045305`*^9}, {3.669984562432563*^9, 
   3.669984562589572*^9}, {3.6699845935103397`*^9, 3.669984598351617*^9}, {
   3.669987029003642*^9, 3.669987059072362*^9}, {3.6699871042399454`*^9, 
   3.6699871166686563`*^9}, {3.669987329119808*^9, 3.669987329224814*^9}, {
   3.669987550357462*^9, 3.669987550514471*^9}, {3.6712802969814854`*^9, 
   3.6712804355944138`*^9}, {3.671280676873214*^9, 3.6712807055898566`*^9}, 
   3.67128094167836*^9, {3.6712809791635036`*^9, 3.6712809976035585`*^9}, {
   3.6712827321037664`*^9, 3.6712827330208187`*^9}, {3.6712828877126665`*^9, 
   3.671282951841335*^9}, {3.671283082080784*^9, 3.671283090544268*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellChangeTimes->{{3.6328723196334095`*^9, 3.6328723203053007`*^9}, 
   3.6328724760292673`*^9}],

Cell["Get one datapoint", "Text",
 CellChangeTimes->{{3.667300694501926*^9, 3.6673006983081436`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"msGetBBG", "[", 
  RowBox[{"\"\<C US Equity\>\"", ",", "\"\<PX_LAST\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6673006850173836`*^9, 3.6673006903826904`*^9}}],

Cell[BoxData["43.745`"], "Output",
 CellChangeTimes->{3.6673006912757416`*^9}]
}, Open  ]],

Cell["\<\
Get multiple datapoint -- if you ask for a lot of names, Bloomberg may not \
return the answers in order, so the WSTP interface tags each answer with the \
corresponding security name.\
\>", "Text",
 CellChangeTimes->{{3.667300694501926*^9, 3.6673006983081436`*^9}, {
  3.667300870831012*^9, 3.6673009349616795`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"msGetBBG", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<IBM US Equity\>\"", ",", "\"\<AAPL US Equity\>\""}], "}"}], 
   ",", "\"\<PX_LAST\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.455290478791*^9, 3.455290479541*^9}, {
   3.45529072813475*^9, 3.45529074138475*^9}, {3.455290797431625*^9, 
   3.455290806087875*^9}, {3.455290906791*^9, 3.455290964650375*^9}, {
   3.455291070244125*^9, 3.45529108969725*^9}, {3.455292108587875*^9, 
   3.455292116525375*^9}, {3.455292361244125*^9, 3.455292364556625*^9}, {
   3.632871411615878*^9, 3.6328714350398493`*^9}, 3.6663626694902067`*^9, {
   3.6673006311543026`*^9, 3.6673006615880437`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"IBM US Equity\"\>", ",", "145.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AAPL US Equity\"\>", ",", "105.67`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.632871435695438*^9, 3.633088838782712*^9, 
  3.6330889604282074`*^9, 3.633089348794422*^9, 3.667300661983066*^9}]
}, Open  ]],

Cell["Works with text as well as numbers.", "Text",
 CellChangeTimes->{{3.6673009509855957`*^9, 3.6673009609031634`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"msGetBBG", "[", 
  RowBox[{"\"\<IBM US Equity\>\"", ",", "\"\<General_Counsel\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.455291454837875*^9, 3.455291464025375*^9}, {
   3.6328714470398912`*^9, 3.6328714490087557`*^9}, {3.6663626695032077`*^9, 
   3.6663626695032077`*^9}, {3.667300963579316*^9, 3.667300970259699*^9}, 
   3.6673010066747813`*^9}],

Cell[BoxData["\<\"\\\"MICHELLE H BROWDY\\\"\"\>"], "Output",
 CellChangeTimes->{{3.45529144569725*^9, 3.455291465025375*^9}, 
   3.455291502275375*^9, 3.45529159969725*^9, 3.455291718041*^9, 
   3.455292200181625*^9, 3.4552923547285*^9, 3.455465655931625*^9, 
   3.602961309094805*^9, 3.6328714505863905`*^9, 3.6330889626777744`*^9, 
   3.633089350107164*^9, 3.667301007211812*^9}]
}, Open  ]],

Cell["\<\
Works with arrays of data (which are often most conveniently stored as \
Datasets), and handles missing fields elegantly.\
\>", "Text",
 CellChangeTimes->{{3.6673010129011374`*^9, 3.667301045172983*^9}, {
  3.667301149408945*^9, 3.667301163946777*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{"msGetBBG", "[", 
   RowBox[{"\"\<CAR US Equity\>\"", ",", "\"\<DVD_HIST_ALL\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.66730107588374*^9, 3.6673010834771743`*^9}, {
  3.6673011293868*^9, 3.66730114057044*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{GridBox[{{
       StyleBox["\"Declared Date\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Ex-Date\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Record Date\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Payable Date\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Dividend Amount\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Dividend Frequency\"", 
        GrayLevel[0.3]], 
       StyleBox["\"Dividend Type\"", 
        GrayLevel[0.3]]}, {
       StyleBox["\"2006-08-23\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-09-05\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-09-05\"", FontColor -> GrayLevel[0.4]], 
       InterpretationBox[
        StyleBox[
        "KeyAbsent", FontFamily -> "Arial", FontSize -> 11, FontWeight -> 
         Bold, 
         GrayLevel[0.7]], 
        Missing["KeyAbsent", "Payable Date"]], 
       TagBox[
        InterpretationBox["\"0.1\"", 0.1, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Stock Split\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-10-24\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-08-01\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-21\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-31\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Spinoff\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-10-24\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-08-01\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-21\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-31\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.25\"", 0.25, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Spinoff\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2006-07-13\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-21\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-07-21\"", FontColor -> GrayLevel[0.4]], 
       InterpretationBox[
        StyleBox[
        "KeyAbsent", FontFamily -> "Arial", FontSize -> 11, FontWeight -> 
         Bold, 
         GrayLevel[0.7]], 
        Missing["KeyAbsent", "Payable Date"]], 
       TagBox[
        InterpretationBox["\"1.\"", 1., AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Poison Pill Rights\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2006-05-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-05-19\"", FontColor -> GrayLevel[0.4]], 
       InterpretationBox[
        StyleBox[
        "KeyAbsent", FontFamily -> "Arial", FontSize -> 11, FontWeight -> 
         Bold, 
         GrayLevel[0.7]], 
        Missing["KeyAbsent", "Record Date"]], 
       InterpretationBox[
        StyleBox[
        "KeyAbsent", FontFamily -> "Arial", FontSize -> 11, FontWeight -> 
         Bold, 
         GrayLevel[0.7]], 
        Missing["KeyAbsent", "Payable Date"]], 
       InterpretationBox[
        StyleBox[
        "KeyAbsent", FontFamily -> "Arial", FontSize -> 11, FontWeight -> 
         Bold, 
         GrayLevel[0.7]], 
        Missing["KeyAbsent", "Dividend Amount"]], 
       StyleBox["\"Suspend\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Discontinued\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2006-02-09\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-02-23\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-02-27\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2006-03-14\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"1.1\"", 1.1, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-10-18\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-11-17\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-11-21\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-12-13\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"1.1\"", 1.1, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-07-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-08-18\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-08-22\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-09-13\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"1.1\"", 1.1, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-04-26\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-05-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-05-23\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-06-14\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.9\"", 0.9, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2005-01-24\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-02-24\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-02-28\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-03-15\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.9\"", 0.9, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2004-10-12\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-02-01\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-01-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2005-01-31\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Spinoff\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2004-10-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-11-18\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-11-22\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-12-14\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.9\"", 0.9, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2004-07-20\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-08-12\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-08-16\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-09-14\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.9\"", 0.9, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2004-04-20\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-05-20\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-05-24\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-06-15\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.7\"", 0.7, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"2004-02-11\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-02-19\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-02-23\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"2004-03-16\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"0.7\"", 0.7, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"Quarter\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Regular Cash\"", FontColor -> GrayLevel[0.4]]}, {
       StyleBox["\"1996-09-25\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"1996-10-22\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"1996-10-07\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"1996-10-21\"", FontColor -> GrayLevel[0.4]], 
       TagBox[
        InterpretationBox["\"1.5\"", 1.5, AutoDelete -> True], 
        NumberForm[#, 4]& ], 
       StyleBox["\"None\"", FontColor -> GrayLevel[0.4]], 
       StyleBox["\"Stock Split\"", FontColor -> GrayLevel[0.4]]}, {
       ItemBox[
        UnderscriptBox["\[VerticalEllipsis]", 
         StyleBox["5", 
          GrayLevel[0.5]]], Alignment -> {Center, Bottom}, Background -> 
        RGBColor[0.985, 0.98, 0.973]], "\[SpanFromLeft]", "\[SpanFromLeft]", 
       "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
       "\[SpanFromLeft]"}, {
       ItemBox[
        RowBox[{
          TagBox[
           TooltipBox["2 levels", 
            InterpretationBox[
             TagBox[
              TagBox[
               StyleBox[
                TagBox[
                 TooltipBox[
                  SubscriptBox[
                   RowBox[{"{", 
                    RowBox[{
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    StyleBox[
                    "Declared Date", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Ex-Date", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Record Date", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Payable Date", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Dividend Amount", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Real", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[Real]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[Real]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[Real], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Dividend Frequency", FontColor -> 
                    RGBColor[0.6, 0.4, 0.2], FontFamily -> "Verdana", 
                    FontWeight -> Normal], 
                    StyleBox[
                    "\[Rule]", FontColor -> GrayLevel[0.65], FontWeight -> 
                    "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], 
                    StyleBox[
                    ",", FontColor -> GrayLevel[0.65], FontWeight -> "Thin"], 
                    RowBox[{
                    StyleBox[
                    "Dividend Type", FontColor -> RGBColor[0.6, 0.4, 0.2], 
                    FontFamily -> "Verdana", FontWeight -> Normal], 
                    StyleBox["\[Rule]", FontColor -> GrayLevel[0.65], 
                    FontWeight -> "Thin"], 
                    TagBox[
                    TooltipBox[
                    FrameBox[
                    StyleBox["Str", FontColor -> RGBColor[0, 
                    Rational[2, 3], 0], FontFamily -> "Monaco"], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Atom[String]", ShowStringCharacters -> True, 
                    NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Atom[String]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Atom[String], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}]}], "\[RightAssociation]"}], FrameStyle -> 
                    Dynamic[
                    If[
                    CurrentValue["MouseOver"], 
                    GrayLevel[0.9], None]], BaselinePosition -> Baseline, 
                    FrameMargins -> {{0, 0}, {2, 2}}, ContentPadding -> 
                    False], 
                    Cell[
                    BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Struct[{\"Declared Date\", \"Ex-Date\", \
\"Record Date\", \"Payable Date\", \"Dividend Amount\", \"Dividend \
Frequency\", \"Dividend Type\"}, {TypeSystem`Atom[String], \
TypeSystem`Atom[String], TypeSystem`Atom[String], TypeSystem`Atom[String], \
TypeSystem`Atom[Real], TypeSystem`Atom[String], TypeSystem`Atom[String]}]", 
                    ShowStringCharacters -> True, NumberMarks -> True], 
                    InputForm[
                    
                    TypeSystem`Struct[{
                    "Declared Date", "Ex-Date", "Record Date", "Payable Date",
                     "Dividend Amount", "Dividend Frequency", 
                    "Dividend Type"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}]], Editable -> True, AutoDelete -> 
                    True]], "Input", FontTracking -> "Plain"], TooltipDelay -> 
                    0.25], 
                    EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    
                    TypeSystem`Struct[{
                    "Declared Date", "Ex-Date", "Record Date", "Payable Date",
                     "Dividend Amount", "Dividend Frequency", 
                    "Dividend Type"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], InputForm], "Input"]], Method -> 
                    "Preemptive", PassEventsDown -> True, PassEventsUp -> 
                    False}]]}], "}"}], 
                   StyleBox[
                   "21", FontFamily -> "Arial", FontWeight -> Normal]], 
                  Cell[
                   BoxData[
                    InterpretationBox[
                    StyleBox[
                    "TypeSystem`Vector[TypeSystem`Struct[{\"Declared Date\", \
\"Ex-Date\", \"Record Date\", \"Payable Date\", \"Dividend Amount\", \
\"Dividend Frequency\", \"Dividend Type\"}, {TypeSystem`Atom[String], \
TypeSystem`Atom[String], TypeSystem`Atom[String], TypeSystem`Atom[String], \
TypeSystem`Atom[Real], TypeSystem`Atom[String], TypeSystem`Atom[String]}], \
21]", ShowStringCharacters -> True, NumberMarks -> True], 
                    InputForm[
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "Declared Date", "Ex-Date", "Record Date", "Payable Date",
                     "Dividend Amount", "Dividend Frequency", 
                    "Dividend Type"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 21]], Editable -> True, 
                    AutoDelete -> True]], "Input", FontTracking -> "Plain"], 
                  TooltipDelay -> 0.25], 
                 EventHandlerTag[{"MouseClicked" :> CellPrint[
                    Cell[
                    ToString[
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "Declared Date", "Ex-Date", "Record Date", "Payable Date",
                     "Dividend Amount", "Dividend Frequency", 
                    "Dividend Type"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 21], InputForm], "Input"]], 
                   Method -> "Preemptive", PassEventsDown -> True, 
                   PassEventsUp -> False}]], FontTracking -> "Condensed", 
                FontWeight -> "Bold", SpanMinSize -> 1.3, SpanMaxSize -> 3.], 
               Deploy, DefaultBaseStyle -> "Deploy"], 
              MouseAppearanceTag["LinkHand"]], 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "Declared Date", "Ex-Date", "Record Date", "Payable Date", 
                "Dividend Amount", "Dividend Frequency", "Dividend Type"}, {
                TypeSystem`Atom[String], 
                TypeSystem`Atom[String], 
                TypeSystem`Atom[String], 
                TypeSystem`Atom[String], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[String], 
                TypeSystem`Atom[String]}], 21]], TooltipDelay -> 1.5], 
           EventHandlerTag[{"MouseClicked" :> Print[
               InputForm[
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "Declared Date", "Ex-Date", "Record Date", "Payable Date", 
                   "Dividend Amount", "Dividend Frequency", "Dividend Type"}, {
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], 21]]]}]], 
          AdjustmentBox[" | ", BoxBaselineShift -> -0.3], 
          RowBox[{"21", "rows"}]}], 
        BaseStyle -> {
         FontFamily -> "Helvetica", FontSize -> 10, FontColor -> 
          GrayLevel[0.4], Editable -> False, Selectable -> False}, 
        ItemSize -> {Automatic, Automatic}, Alignment -> {Left, Center}, 
        Background -> RGBColor[0.92, 0.92, 0.9]], "\[SpanFromLeft]", 
       "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
       "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
     GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
     FrameStyle -> RGBColor[0, 0, 0, 0.4], GridBoxDividers -> {"Columns" -> {
         RGBColor[0, 0, 0, 0.4], {
          RGBColor[0, 0, 0, 0.09]}, 
         RGBColor[0, 0, 0, 0.4]}, "Rows" -> {
         RGBColor[0, 0, 0, 0.4], 
         RGBColor[0, 0, 0, 0.3], {
          RGBColor[0, 0, 0, 0.08]}, 
         RGBColor[0, 0, 0, 0.4]}}, RowSpacings -> {1.5, 1.2}, 
     GridBoxBackground -> {"Columns" -> {}, "Rows" -> {
         RGBColor[0.92, 0.92, 0.9]}}, 
     GridBoxAlignment -> {"Columns" -> {{Left}}}, ColumnSpacings -> 2.5, 
     GridFrameMargins -> {{2, 3}, {1, 3}}, 
     GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      RowMinHeight -> 1.3],"Dataset[{__Association}]"},
   "Dataset",
   DisplayFunction->(TagBox[
     StyleBox[#, {
      ShowAutoStyles -> False, LineBreakWithin -> False, FontWeight -> 
       "Light", FontFamily -> "Helvetica Neue", NumberMarks -> False, 
       SpanMaxSize -> 3, SpanMinSize -> 1., Editable -> False, Selectable -> 
       True, Background -> RGBColor[0.985, 0.98, 0.973], 
       LinebreakAdjustments -> {0.4, 5, 100, 0, 0.5}, LineIndent -> 0, 
       LineSpacing -> {1.1, 5}}], Deploy]& ),
   InterpretationFunction->(#2& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.667301143300596*^9}]
}, Open  ]],

Cell["Historical data is by default returned as TemporalData[]", "Text",
 CellChangeTimes->{{3.6673012261393337`*^9, 3.6673012410411863`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"histExample", "=", 
  RowBox[{"msBBGgetHistory", "[", 
   RowBox[{"\"\<AAPL Equity\>\"", ",", "\"\<Px_Last\>\"", ",", 
    RowBox[{"DateObject", "[", "\"\<20070901\>\"", "]"}], ",", 
    RowBox[{"DateObject", "[", "\"\<20081020\>\"", "]"}], ",", 
    "\"\<month\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.60296134205569*^9, 3.6029613822159867`*^9}, {
  3.6328715136830525`*^9, 3.6328715414186525`*^9}, {3.6328721005789337`*^9, 
  3.632872104704257*^9}, {3.6330896053657017`*^9, 3.6330896055062437`*^9}, {
  3.6330898839379168`*^9, 3.6330898853911257`*^9}, {3.667301216379776*^9, 
  3.6673012220070972`*^9}, {3.6673016081951866`*^9, 3.667301610655327*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TemporalData",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{11., {0., 11.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
             Opacity[1.], LineBox[CompressedData["
1:eJwVkn001QcYx70sdy9Zoq6WJkROM6lOMi/leaQRiqvL0MV17+/en11M6hZZ
yvtLt/KSbVKcHC/pnpmcmZyWnVteioV5iWGbjbBnNW/dTByzuz++5/Pv95zP
x1wU6y/R0dLSctHsf9YeWO/3M5/wL9Gk99t2Ynj2nkryNIAw9aFiHnQZUL7Y
1ToVSBh6YudBHjHQpFx+NfUJYQ57tNRCJYFRnYNm40GEk3yuY1OBFAr8fQpf
BhNm5Y0k7Y5noeBy7dBcCKEwZ7/lkRIWtqn6I9cICBWO7oNxLAvNl87MGYUS
Wm28upy/h4U77ie9DcII08bNh121WdiptpsxDydc5/tWUcuPUnh9xYMxFxLy
ZyrS281Y6Gse6TWJIFwuW2ldTGHhwOxuhY2IsF2kmJI9Z2GBM7Zhh5hwjdLz
bteRSHA15v/pzBBKV53Y042R8KXK7bvDEkK9qcpf5D4sOAcojh2SEnrFCO19
OyQQ98cXzoEsoWChft15awbUQUtqfiThtHb3rsKbInjzsdli5KeERw3S+v5d
FMIHPc3qeBnhjfaL1tcrhFDcqnoojyLkTNRvdhEK4XrdheHMaMI2E+8dJlwh
UHZRc2YMocQo2qqjLBwOLdlWpXxG+OF9bnZ3ajjsEWf05scS3oxvqT7rIoSY
u/t+yj1BaOMcMuBfKwRHXaVxeRzhWIm/2xObCDCia0F1JzV+qm6/XK2MAKd7
47KaU4SbOOnphntFMJ860/aDnLDTJ3giS08Mi/sC1E2nCbuCmJqVDjGszXAw
aTyj+ddjvFSoYKCuY0TxKJ4wkBOslyeQQPnyUGdLAqHdKcunJX9LYLtlcfDg
WUJLg3S7EL4U/nGobxhM1PQjmH3gWS+FgQkv/b7PNX0UqSjAkIWPFeU14+cI
qzzKI0ISWNDdErh1LIlw43xXT7QrC7yKjuFX5wlFo3u5t2ql8E3b97lvJBPK
tTk2yRZSCOrX42qnaPwcNvXoL5XA1SGjScNUwtlnM63vGkhgS0dilmEaYW/2
QlhaGwPf8sMs9NMJa6NWjOQFDIwM6HLezyC8YH3868VgBvzcdZs2ZxK68Uzt
3a0YCLzdct82i/D1sY/Ktr0QQ1S1ToNztqYn3mplF5eBzoLiZIccQnt7nu05
AQMqubrQ8yJh7O/vdOtXM6DlVp3ooSC0Xvtr6FfTDPTomSqPXyJ87B4f06Ml
gTqJQZ/sMqG20/Pmhmti+K1W0MleIWz21hHe8RLBjTnZ+sRcwkcbGu8ljArh
lmnf9sQ8QqXavEG5KRx4D6Z9k/IJW574le6XCeA/2+DTfw==
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{3.4*^9, 105.},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Opacity[0.5], 
            Thickness[Tiny], 
            RGBColor[0.368417, 0.506779, 0.709798]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImagePadding->All,
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}],
          
          Method->{
           "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
            AbsolutePointSize[6], "ScalingFunctions" -> None},
          
          PlotRange->{{3399926400, 3431721600}, {113.66001088991749`, 
            197.76433145068148`}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.1], 
             Scaled[0.1]}, {
             Scaled[0.1], 
             Scaled[0.1]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            TagBox[
             TemplateBox[{RowBox[{
                 TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"28 Sep 2007\"", "SummaryItem"]}],RowBox[{
                 TagBox["\" to \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"30 Sep 2008\"", "SummaryItem"]}]},
              "RowDefault"],
             "SummaryItem"], "\[SpanFromLeft]"},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["13",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"Paths: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
             Opacity[1.], LineBox[CompressedData["
1:eJwVkn001QcYx70sdy9Zoq6WJkROM6lOMi/leaQRiqvL0MV17+/en11M6hZZ
yvtLt/KSbVKcHC/pnpmcmZyWnVteioV5iWGbjbBnNW/dTByzuz++5/Pv95zP
x1wU6y/R0dLSctHsf9YeWO/3M5/wL9Gk99t2Ynj2nkryNIAw9aFiHnQZUL7Y
1ToVSBh6YudBHjHQpFx+NfUJYQ57tNRCJYFRnYNm40GEk3yuY1OBFAr8fQpf
BhNm5Y0k7Y5noeBy7dBcCKEwZ7/lkRIWtqn6I9cICBWO7oNxLAvNl87MGYUS
Wm28upy/h4U77ie9DcII08bNh121WdiptpsxDydc5/tWUcuPUnh9xYMxFxLy
ZyrS281Y6Gse6TWJIFwuW2ldTGHhwOxuhY2IsF2kmJI9Z2GBM7Zhh5hwjdLz
bteRSHA15v/pzBBKV53Y042R8KXK7bvDEkK9qcpf5D4sOAcojh2SEnrFCO19
OyQQ98cXzoEsoWChft15awbUQUtqfiThtHb3rsKbInjzsdli5KeERw3S+v5d
FMIHPc3qeBnhjfaL1tcrhFDcqnoojyLkTNRvdhEK4XrdheHMaMI2E+8dJlwh
UHZRc2YMocQo2qqjLBwOLdlWpXxG+OF9bnZ3ajjsEWf05scS3oxvqT7rIoSY
u/t+yj1BaOMcMuBfKwRHXaVxeRzhWIm/2xObCDCia0F1JzV+qm6/XK2MAKd7
47KaU4SbOOnphntFMJ860/aDnLDTJ3giS08Mi/sC1E2nCbuCmJqVDjGszXAw
aTyj+ddjvFSoYKCuY0TxKJ4wkBOslyeQQPnyUGdLAqHdKcunJX9LYLtlcfDg
WUJLg3S7EL4U/nGobxhM1PQjmH3gWS+FgQkv/b7PNX0UqSjAkIWPFeU14+cI
qzzKI0ISWNDdErh1LIlw43xXT7QrC7yKjuFX5wlFo3u5t2ql8E3b97lvJBPK
tTk2yRZSCOrX42qnaPwcNvXoL5XA1SGjScNUwtlnM63vGkhgS0dilmEaYW/2
QlhaGwPf8sMs9NMJa6NWjOQFDIwM6HLezyC8YH3868VgBvzcdZs2ZxK68Uzt
3a0YCLzdct82i/D1sY/Ktr0QQ1S1ToNztqYn3mplF5eBzoLiZIccQnt7nu05
AQMqubrQ8yJh7O/vdOtXM6DlVp3ooSC0Xvtr6FfTDPTomSqPXyJ87B4f06Ml
gTqJQZ/sMqG20/Pmhmti+K1W0MleIWz21hHe8RLBjTnZ+sRcwkcbGu8ljArh
lmnf9sQ8QqXavEG5KRx4D6Z9k/IJW574le6XCeA/2+DTfw==
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{3.4*^9, 105.},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Opacity[0.5], 
            Thickness[Tiny], 
            RGBColor[0.368417, 0.506779, 0.709798]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImagePadding->All,
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}],
          
          Method->{
           "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
            AbsolutePointSize[6], "ScalingFunctions" -> None},
          
          PlotRange->{{3399926400, 3431721600}, {113.66001088991749`, 
            197.76433145068148`}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.1], 
             Scaled[0.1]}, {
             Scaled[0.1], 
             Scaled[0.1]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            TagBox[
             TemplateBox[{RowBox[{
                 TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"28 Sep 2007\"", "SummaryItem"]}],RowBox[{
                 TagBox["\" to \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"30 Sep 2008\"", "SummaryItem"]}]},
              "RowDefault"],
             "SummaryItem"], "\[SpanFromLeft]"},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["13",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"Paths: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Regular: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["False",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"Output dimension: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Metadata: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"], "\[InvisibleSpace]", 
             TagBox["\<\" properties\"\>",
              "SummaryItemAnnotation"]}], 
            RowBox[{
             TagBox["\<\"Minimum increment: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2505600",
              "SummaryItem"]}]},
           {
            TagBox["\<\"\"\>",
             "SummaryItem"], 
            RowBox[{
             TagBox["\<\"Resampling: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"LinearInterpolation\"\>",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  TemporalData[
  Automatic, {{{153.47, 189.95, 182.22, 198.08, 135.36, 125.02, 143.5, 173.95,
     188.75, 167.44, 158.95, 169.53, 113.66}}, {{{3399926400, 3402777600, 
    3405369600, 3408048000, 3410726400, 3413232000, 3415910400, 3418502400, 
    3421094400, 3423772800, 3426451200, 3428956800, 3431721600}}}, 1, {
    "Continuous", 1}, {"Discrete", 1}, 1, {
    MetaInformation -> {"name" -> "AAPL Equity: Px_Last", "type" -> "value"}, 
     ValueDimensions -> 1, DateFunction -> Automatic, 
     ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, True, 
   10.4],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.6029613383204765`*^9, 3.60296138262201*^9}, {
   3.6328715192930365`*^9, 3.6328715417154875`*^9}, 3.6328721054387245`*^9, 
   3.633088966943593*^9, 3.6330893526382413`*^9, 3.633089606131159*^9, 
   3.633089910564449*^9, 3.667301222882148*^9, 3.667301615984632*^9}]
}, Open  ]],

Cell["\<\
msBBGgetHistory records type and name in this TemporalData as Metadata, so it \
can be easily retrieved thusly:\
\>", "Text",
 CellChangeTimes->{{3.667301638699931*^9, 3.6673016390699525`*^9}, {
  3.667301863411784*^9, 3.667301900452903*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"histExample", "[", "\"\<name\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.667301624996147*^9, 3.6673016336916447`*^9}}],

Cell[BoxData["\<\"AAPL Equity: Px_Last\"\>"], "Output",
 CellChangeTimes->{{3.667301630755477*^9, 3.667301633901657*^9}}]
}, Open  ]],

Cell["You can tap the Bloomberg output with", "Text",
 CellChangeTimes->{{3.6330898587026567`*^9, 3.633089901908188*^9}}],

Cell["Historical intraday data comes from separate functions:", "Text",
 CellChangeTimes->{{3.6673019150577383`*^9, 3.6673019310996556`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"msBBGetIntraday", "[", 
   RowBox[{"\"\<SPX Index\>\"", ",", 
    RowBox[{"DateObject", "[", "\"\<2014-12-03T09:30:00\>\"", "]"}], ",", 
    RowBox[{"DateObject", "[", "\"\<2014-12-03T09:31:00\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.453722229078125*^9, 3.45372224440625*^9}, {
   3.45372252646875*^9, 3.453722563296875*^9}, {3.45372283796875*^9, 
   3.453722852375*^9}, {3.453723053*^9, 3.453723074375*^9}, {
   3.453723404671875*^9, 3.453723405109375*^9}, {3.453723643*^9, 
   3.453723643421875*^9}, {3.45372459578125*^9, 3.45372459971875*^9}, {
   3.453724728734375*^9, 3.45372473225*^9}, {3.45372511259375*^9, 
   3.453725113015625*^9}, {3.4592743951875*^9, 3.459274444046875*^9}, {
   3.459274482484375*^9, 3.45927448271875*^9}, {3.459274547890625*^9, 
   3.45927459928125*^9}, {3.459274696375*^9, 3.45927470203125*^9}, {
   3.4592748145625*^9, 3.459274836265625*^9}, {3.459526650144084*^9, 
   3.459526656644084*^9}, {3.459526911097209*^9, 3.459526921456584*^9}, {
   3.459528595940959*^9, 3.459528596394084*^9}, {3.459528738690959*^9, 
   3.459528742753459*^9}, 3.459528828269084*^9, {3.459528866784709*^9, 
   3.459528869409709*^9}, {3.459528908925334*^9, 3.459528909565959*^9}, {
   3.459528946659709*^9, 3.459528946925334*^9}, {3.459530212628459*^9, 
   3.459530217050334*^9}, {3.459536738925334*^9, 3.459536748456584*^9}, {
   3.459537472362834*^9, 3.459537509644084*^9}, {3.459537555878459*^9, 
   3.459537559894084*^9}, {3.459538035800334*^9, 3.459538035987834*^9}, {
   3.459538288581584*^9, 3.459538288737834*^9}, {3.459538354831584*^9, 
   3.459538363269084*^9}, {3.459538432909709*^9, 3.459538433222209*^9}, {
   3.459538939315959*^9, 3.459538939847209*^9}, {3.602961402848167*^9, 
   3.602961440288308*^9}, {3.632872113189006*^9, 3.6328721856448746`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:01\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "1.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.45`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:06\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "6.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.62`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:11\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "11.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.59`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:16\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "16.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.45`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:21\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "21.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.74`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:26\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "26.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.82`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:31\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "31.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.79`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:36\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "36.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2067.93`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:41\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "41.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2068.15`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:46\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "46.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2068.38`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:51\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "51.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2068.39`", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Wed 3 Dec 2014 09:30:56\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "3"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "56.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "2068.37`", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.459538949628459*^9, {3.602961403760219*^9, 3.602961441387371*^9}, {
   3.6328721298300576`*^9, 3.632872186644769*^9}, 3.633089005179681*^9, 
   3.63308935682585*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"msBBGetIntradayBars", "[", 
   RowBox[{"\"\<INDU Index\>\"", ",", 
    RowBox[{"DateObject", "[", "\"\<2014-12-02T09:30:00\>\"", "]"}], ",", 
    RowBox[{"DateObject", "[", "\"\<2014-12-02T10:30:00\>\"", "]"}], ",", 
    "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.454587848335125*^9, 3.454587859507*^9}, {
   3.45458790747575*^9, 3.454587927960125*^9}, {3.45458807360075*^9, 
   3.45458809510075*^9}, {3.459275881515625*^9, 3.45927592615625*^9}, {
   3.459276168515625*^9, 3.4592761741875*^9}, {3.459276238203125*^9, 
   3.459276300421875*^9}, {3.459276330921875*^9, 3.459276410234375*^9}, {
   3.45927644059375*^9, 3.459276440921875*^9}, {3.4592768755625*^9, 
   3.459276880734375*^9}, {3.459276914078125*^9, 3.45927691478125*^9}, {
   3.459276982796875*^9, 3.459277007109375*^9}, {3.459529880003459*^9, 
   3.459530002284709*^9}, {3.459530269034709*^9, 3.459530284925334*^9}, {
   3.459531241440959*^9, 3.459531277034709*^9}, {3.459531384425334*^9, 
   3.459531387597209*^9}, {3.459532305581584*^9, 3.459532307831584*^9}, {
   3.459534557331584*^9, 3.459534561800334*^9}, {3.459535735472209*^9, 
   3.459535738894084*^9}, {3.459536102940959*^9, 3.459536103206584*^9}, 
   3.459536596815959*^9, {3.602961457161274*^9, 3.6029614889120893`*^9}, {
   3.6328722194274797`*^9, 3.632872285601246*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 09:30:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "30", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17778.85`", ",", "17826.82`", ",", "17778.85`", 
     ",", "17819.98`", ",", "300", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 09:40:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "40", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17819.44`", ",", "17824.45`", ",", "17801.87`", 
     ",", "17805.54`", ",", "300", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 09:50:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"9", ",", "50", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17806.41`", ",", "17817.77`", ",", "17797.6`", 
     ",", "17811.79`", ",", "300", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 10:00:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"10", ",", "0", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17813.01`", ",", "17844.29`", ",", "17813.01`", 
     ",", "17836.52`", ",", "300", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 10:10:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"10", ",", "10", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17836.23`", ",", "17838.06`", ",", "17829.68`", 
     ",", "17837.64`", ",", "300", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{
      RowBox[{"\"Tue 2 Dec 2014 10:20:00\""}],RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2014", ",", "12", ",", "2"}], "}"}], ",", 
           RowBox[{"TimeObject", "[", 
             RowBox[{"{", 
               RowBox[{"10", ",", "20", ",", "0.`"}], "}"}], "]"}]}], "]"}]},
      "DateObject",
      Editable->False], ",", "17837.39`", ",", "17840.91`", ",", "17832.51`", 
     ",", "17833.23`", ",", "300", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.454587860835125*^9, {3.45458791016325*^9, 3.454587929257*^9}, {
   3.4545880750695*^9, 3.4545880968195*^9}, 3.454670632374875*^9, {
   3.45927583465625*^9, 3.45927584103125*^9}, 3.45927587253125*^9, 
   3.459275908296875*^9, 3.459275940140625*^9, 3.4592761865625*^9, {
   3.4592762426875*^9, 3.459276365453125*^9}, {3.459276398*^9, 
   3.459276447859375*^9}, 3.459276890546875*^9, 3.459276925328125*^9, {
   3.459276997140625*^9, 3.45927701709375*^9}, {3.459529895065959*^9, 
   3.459529945065959*^9}, {3.459529975722209*^9, 3.459530002956584*^9}, 
   3.459530197800334*^9, {3.459530270456584*^9, 3.459530286253459*^9}, 
   3.459531244940959*^9, 3.459531288925334*^9, 3.459531395284709*^9, 
   3.459531581878459*^9, 3.459531981284709*^9, 3.459532017128459*^9, 
   3.459532173347209*^9, 3.459532232519084*^9, 3.459532338097209*^9, 
   3.459532711753459*^9, 3.459532813394084*^9, 3.459533406128459*^9, 
   3.459533587128459*^9, 3.459534563237834*^9, 3.459535730628459*^9, 
   3.459535815581584*^9, 3.459535947440959*^9, 3.459536129909709*^9, 
   3.459536580862834*^9, 3.459536665534709*^9, 3.459539127315959*^9, {
   3.6029614704700346`*^9, 3.602961490077156*^9}, {3.632872243631094*^9, 
   3.632872286163984*^9}, 3.6330890070385294`*^9, 3.6330893604665155`*^9}]
}, Open  ]],

Cell["\<\
If you will be calling these functions repeatedly, it makes sense to leave \
the link live and save the time of relaunching it.\
\>", "Text",
 CellChangeTimes->{{3.6673019350458813`*^9, 3.667301952387873*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"histLink", "=", 
   RowBox[{"msBBGgetHistoryMakeLinkObject", "[", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x1", "=", 
   RowBox[{"msBBGgetHistory", "[", 
    RowBox[{"\"\<IBM US Equity\>\"", ",", "\"\<Px_Close_1D\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"2015", ",", "1", ",", "1"}], "}"}], ",", "\"\<\>\"", ",", 
     "\"\<Day\>\"", ",", 
     RowBox[{"\"\<use DPDF\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"LinkObject", "\[Rule]", "histLink"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x2", "=", 
   RowBox[{"msBBGgetHistory", "[", 
    RowBox[{"\"\<IBM US Equity\>\"", ",", "\"\<Px_Close_1D\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"2015", ",", "1", ",", "1"}], "}"}], ",", "\"\<\>\"", ",", 
     "\"\<Day\>\"", ",", 
     RowBox[{"\"\<use DPDF\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"LinkObject", "\[Rule]", "histLink"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Blue"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.666032367807501*^9, 3.666032413613121*^9}, {
  3.6660324702643614`*^9, 3.6660324990340066`*^9}, {3.6661042983254642`*^9, 
  3.6661043204035883`*^9}, {3.666365406708767*^9, 3.666365406779771*^9}, {
  3.6664447529678645`*^9, 3.6664447588882027`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[1, 0, 0], PointSize[0.0055000000000000005`], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1: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
n3rWLrL9Bo3EvKg=
      "]]}, 
    {RGBColor[0, 0, 1], PointSize[0.0055000000000000005`], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1: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
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.6291456*^9, 115.0225},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->
   FrontEndValueCache[{{Automatic, Automatic}, {Charting`FindScaledTicks[
       (Charting`getDateTicks[Automatic, {Automatic}, 
        (Map[DateList, {
          SlotSequence[1]}]& )[
         SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, Automatic]& )[
        SlotSequence[1]], {Identity, Identity}]& , Charting`ScaledFrameTicks[
       (Charting`getDateTicks[Charting`getDateTicks[Automatic, {Automatic}, 
         (Map[DateList, {
           SlotSequence[1]}]& )[
          SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, 
         Automatic]& , {Automatic}, 
        (Map[DateList, {
          SlotSequence[1]}]& )[
         SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, None]& )[
        SlotSequence[1]], {Identity, Identity}]& }}, {{
     Automatic, Automatic}, {{{3.6290592*^9, 
        FormBox["\"Jan\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6368352*^9, 
        FormBox["\"Apr\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6446976*^9, 
        FormBox["\"Jul\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6526464*^9, 
        FormBox["\"Oct\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6605952*^9, 
        FormBox["\"Jan\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6684576*^9, 
        FormBox["\"Apr\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6290592*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6317376*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6341568*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6368352*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6394272*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6421056*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6446976*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.647376*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6500544*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6526464*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6553248*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6579168*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6605952*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6632736*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6657792*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 
        0.}}}, {{3.6290592*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6368352*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6446976*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6526464*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6605952*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6684576*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6290592*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6317376*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6341568*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6368352*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6394272*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6421056*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6446976*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.647376*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6500544*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6526464*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6553248*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6579168*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6605952*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6632736*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6657792*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}}}}],
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{3.6291456*^9, 3.666384*^9}, {117.85, 174.4}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.666032377566059*^9, 3.666032414401166*^9}, {
   3.6660324893344517`*^9, 3.666032500373083*^9}, 3.6661043233786097`*^9, 
   3.666361673755254*^9, 3.666444765712593*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Uninstall", "[", "histLink", "]"}]], "Input",
 CellChangeTimes->{{3.6664447295455246`*^9, 3.666444734833827*^9}}],

Cell[BoxData["\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\msFunctions\\\\msBBGgetHistoryLink.exe\\\"\"\>"], "Output",
 CellChangeTimes->{3.6664447871908216`*^9}]
}, Open  ]],

Cell["With overrides,", "Text",
 CellChangeTimes->{{3.669987171045767*^9, 3.6699871731718884`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"msGetBBG", "[", 
  RowBox[{"\"\<AAPL US Equity\>\"", ",", "\"\<BETA_RAW_OVERRIDABLE\>\"", ",", 
   RowBox[{"\"\<noisy\>\"", "\[Rule]", "False"}], ",", 
   RowBox[{"\"\<overrides\>\"", "\[Rule]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{
      "\"\<BETA_OVERRIDE_REL_INDEX\>\"", "\[Rule]", "\"\<NDX Index\>\""}], 
      ",", " ", 
      RowBox[{"\"\<BETA_OVERRIDE_START_DT\>\"", "\[Rule]", 
       RowBox[{"bbgifyDate", "[", 
        RowBox[{"{", 
         RowBox[{"2015", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<BETA_OVERRIDE_END_DT\>\"", "\[Rule]", 
       RowBox[{"bbgifyDate", "[", 
        RowBox[{"{", 
         RowBox[{"2015", ",", "12", ",", "3"}], "}"}], "]"}]}]}], "|>"}]}]}], 
  "]"}]], "Input"],

Cell[BoxData["1.206323`"], "Output",
 CellChangeTimes->{3.6699871769721055`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1618, 1030},
WindowMargins->{{Automatic, -1695}, {Automatic, 33}},
ShowSelection->True,
Magnification:>0.95 Inherited,
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 300, 4, 98, "Title"],
Cell[870, 28, 716, 10, 30, "Subsubtitle"],
Cell[1589, 40, 4870, 81, 309, "Text"],
Cell[CellGroupData[{
Cell[6484, 125, 91, 1, 67, "Section"],
Cell[6578, 128, 68437, 1416, 4311, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[75052, 1549, 125, 2, 67, "Section"],
Cell[75180, 1553, 101, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[75306, 1558, 186, 3, 30, "Input"],
Cell[75495, 1563, 78, 1, 29, "Output"]
}, Open  ]],
Cell[75588, 1567, 327, 6, 29, "Text"],
Cell[CellGroupData[{
Cell[75940, 1577, 668, 12, 30, "Input"],
Cell[76611, 1591, 361, 9, 29, "Output"]
}, Open  ]],
Cell[76987, 1603, 121, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[77133, 1608, 377, 7, 30, "Input"],
Cell[77513, 1617, 381, 5, 29, "Output"]
}, Open  ]],
Cell[77909, 1625, 262, 5, 29, "Text"],
Cell[CellGroupData[{
Cell[78196, 1634, 274, 6, 30, "Input"],
Cell[78473, 1642, 30077, 620, 444, "Output"]
}, Open  ]],
Cell[108565, 2265, 142, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[108732, 2270, 685, 11, 30, "Input"],
Cell[109420, 2283, 12183, 293, 67, "Output"]
}, Open  ]],
Cell[121618, 2579, 252, 5, 29, "Text"],
Cell[CellGroupData[{
Cell[121895, 2588, 143, 2, 30, "Input"],
Cell[122041, 2592, 121, 1, 29, "Output"]
}, Open  ]],
Cell[122177, 2596, 121, 1, 29, "Text"],
Cell[122301, 2599, 141, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[122467, 2604, 1837, 28, 30, "Input"],
Cell[124307, 2634, 5773, 150, 100, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130117, 2789, 1347, 21, 30, "Input"],
Cell[131467, 2812, 4537, 99, 70, "Output"]
}, Open  ]],
Cell[136019, 2914, 219, 4, 29, "Text"],
Cell[CellGroupData[{
Cell[136263, 2922, 1467, 35, 91, "Input"],
Cell[137733, 2959, 20449, 465, 232, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158219, 3429, 137, 2, 30, "Input"],
Cell[158359, 3433, 170, 2, 29, "Output"]
}, Open  ]],
Cell[158544, 3438, 99, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[158668, 3443, 764, 18, 51, "Input"],
Cell[159435, 3463, 80, 1, 29, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

